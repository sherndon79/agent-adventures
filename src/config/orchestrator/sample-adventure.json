{
  "id": "sample-adventure",
  "description": "MVP Story Loop - Audience-driven genre selection with 3-agent scene design competition",
  "stages": [
    {
      "id": "scene_reset",
      "type": "system:scene-reset",
      "description": "Clear Isaac Sim stage before new scene generation",
      "dependsOn": [],
      "budget": {
        "timeMs": 5000
      }
    },
    {
      "id": "genre_generation",
      "type": "llm",
      "description": "Generate 5 distinct genres for audience voting",
      "dependsOn": ["scene_reset"],
      "budget": {
        "tokens": 2000,
        "timeMs": 15000
      },
      "outputs": ["genres"],
      "retry": {
        "attempts": 1,
        "delayMs": 250
      },
      "payload": {
        "provider": "claude",
        "maxTokens": 500,
        "systemPrompt": "You generate diverse, visually compelling story genres for 3D scene visualization.",
        "userPrompt": "Generate 5 distinct story genres suitable for 3D scene visualization. Provide each as a numbered option with a brief tagline. Return JSON with structure: { \"genres\": [{ \"id\": 1, \"name\": \"string\", \"tagline\": \"string\" }] }",
        "responseFormat": {
          "type": "json_schema",
          "name": "GenreResponse",
          "schema": {
            "type": "object",
            "properties": {
              "genres": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "number" },
                    "name": { "type": "string" },
                    "tagline": { "type": "string" }
                  },
                  "required": ["id", "name", "tagline"],
                  "additionalProperties": false
                },
                "minItems": 5,
                "maxItems": 5
              }
            },
            "required": ["genres"],
            "additionalProperties": false
          }
        }
      }
    },
    {
      "id": "agent_asset_design",
      "type": "competition",
      "description": "3 agents compete to design static environmental scene (Prompt 1/3)",
      "dependsOn": ["genre_generation"],
      "budget": {
        "proposalTimeoutMs": 30000,
        "executionTimeoutMs": 5000
      },
      "outputs": ["assetProposals"],
      "payload": {
        "proposalType": "asset_creation",
        "expectedAgents": ["claude-1", "gpt-1", "gemini-1"],
        "context": {
          "sourceStage": "genre_generation",
          "outputKey": "winningGenre"
        },
        "promptTemplate": "The audience has chosen: {{winningGenre.name}} - {{winningGenre.tagline}}\n\nDesign a STATIC 3D environmental scene for this genre. Create an ambitious, visually striking tableau/diorama.\n\nIMPORTANT CONSTRAINTS:\n- NO animated characters or creatures\n- NO moving objects or active scenes\n- ONLY static structures: buildings, monuments, terrain, props, decorations\n- Focus on architecture and environment that tells a story through setting\n\nCREATIVE DIRECTION:\n- Think BIG and BOLD - aim for something visually spectacular\n- Use scale creatively (towering structures, intimate details)\n- Create depth and layers (foreground, midground, background)\n- Consider color harmony and visual contrast\n- Design a scene that sparks imagination and invites exploration\n\nProvide:\n1. Scene Concept (2-3 sentences)\n2. Asset List (6-10 STATIC objects)\n\nReturn JSON: { \"concept\": \"string\", \"assets\": [{ \"name\": \"string\", \"mcpElementType\": \"cube|sphere|cylinder\", \"position\": [x,y,z], \"scale\": [x,y,z], \"color\": [r,g,b], \"purpose\": \"string\" }] }",
        "responseSchema": {
          "type": "object",
          "properties": {
            "concept": { "type": "string" },
            "assets": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "mcpElementType": { "type": "string", "enum": ["cube", "sphere", "cylinder"] },
                  "position": { "type": "array", "items": { "type": "number" }, "minItems": 3, "maxItems": 3 },
                  "scale": { "type": "array", "items": { "type": "number" }, "minItems": 3, "maxItems": 3 },
                  "color": { "type": "array", "items": { "type": "number" }, "minItems": 3, "maxItems": 3 },
                  "purpose": { "type": "string" }
                },
                "required": ["name", "mcpElementType", "position", "scale", "color", "purpose"]
              },
              "minItems": 6,
              "maxItems": 10
            }
          },
          "required": ["concept", "assets"]
        }
      }
    },
    {
      "id": "agent_camera_design",
      "type": "competition",
      "description": "3 agents design camera choreography for their scenes (Prompt 2/3)",
      "dependsOn": ["agent_asset_design"],
      "budget": {
        "proposalTimeoutMs": 30000,
        "executionTimeoutMs": 5000
      },
      "outputs": ["cameraProposals"],
      "payload": {
        "proposalType": "camera_planning",
        "expectedAgents": ["claude-1", "gpt-1", "gemini-1"],
        "context": {
          "sourceStage": "agent_asset_design",
          "outputKey": "ownAssetProposal"
        },
        "promptTemplate": "You've created this scene: {{assetProposal.concept}}\n\nAssets you designed:\n{{assetProposal.assets}}\n\nNow design 3-5 camera shots to cinematically reveal this environment.\n\nAvailable shot types:\n- \"smoothMove\": Linear camera movement with easing between positions\n- \"arcShot\": Cinematic arc movement (standard or dramatic style)\n- \"orbitShot\": Orbital movement around a center point\n\nCREATIVE DIRECTION:\n- Start wide to establish context, then move to reveal details\n- Use camera movement to guide the viewer's eye\n- Consider dramatic angles (high, low, dutch)\n- Time shots to create rhythm (quick cuts vs slow reveals)\n- Think like a cinematographer telling a visual story\n\nSHOT CONTINUITY (Optional but Recommended):\n- For smooth transitions: make each shot's start_position match the previous shot's end_position\n- For smooth focus: make each shot's start_target match the previous shot's end_target\n- For jump cuts: positions can be discontinuous for dramatic effect\n\nSHOT PARAMETERS:\nsmoothMove: start_position, end_position, start_target, end_target, duration, easingType (ease_in|ease_out|ease_in_out|linear)\narcShot: start_position, end_position, start_target, end_target, duration, movementStyle (standard|dramatic)\norbitShot: center, distance, start_azimuth, end_azimuth, elevation, duration, startPosition (optional), startTarget, endTarget\n\nReturn JSON with shots array. Design your sequence for maximum cinematic impact.",
        "responseSchema": {
          "type": "object",
          "properties": {
            "shots": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "shotType": { "type": "string", "enum": ["smoothMove", "arcShot", "orbitShot"] },
                  "start_position": { "type": "array", "items": { "type": "number" }, "minItems": 3, "maxItems": 3 },
                  "end_position": { "type": "array", "items": { "type": "number" }, "minItems": 3, "maxItems": 3 },
                  "start_target": { "type": "array", "items": { "type": "number" }, "minItems": 3, "maxItems": 3 },
                  "end_target": { "type": "array", "items": { "type": "number" }, "minItems": 3, "maxItems": 3 },
                  "duration": { "type": "number", "minimum": 0.5 },
                  "easingType": { "type": "string", "enum": ["ease_in", "ease_out", "ease_in_out", "linear"] },
                  "movementStyle": { "type": "string", "enum": ["standard", "dramatic"] },
                  "center": { "type": "array", "items": { "type": "number" }, "minItems": 3, "maxItems": 3 },
                  "distance": { "type": "number" },
                  "start_azimuth": { "type": "number" },
                  "end_azimuth": { "type": "number" },
                  "elevation": { "type": "number" },
                  "description": { "type": "string" }
                },
                "required": ["shotType", "duration", "description"],
                "allOf": [
                  {
                    "if": {
                      "properties": { "shotType": { "const": "smoothMove" } }
                    },
                    "then": {
                      "required": ["start_position", "end_position", "start_target", "end_target", "easingType"]
                    }
                  },
                  {
                    "if": {
                      "properties": { "shotType": { "const": "arcShot" } }
                    },
                    "then": {
                      "required": ["start_position", "end_position", "start_target", "end_target", "movementStyle"]
                    }
                  },
                  {
                    "if": {
                      "properties": { "shotType": { "const": "orbitShot" } }
                    },
                    "then": {
                      "required": ["center", "distance", "start_azimuth", "end_azimuth", "elevation", "start_target", "end_target"]
                    }
                  }
                ]
              },
              "minItems": 3,
              "maxItems": 5
            }
          },
          "required": ["shots"]
        }
      }
    },
    {
      "id": "agent_audio_design",
      "type": "competition",
      "description": "3 agents design audio/narration for their scenes (Prompt 3/3)",
      "dependsOn": ["agent_camera_design"],
      "budget": {
        "proposalTimeoutMs": 30000,
        "executionTimeoutMs": 5000
      },
      "outputs": ["audioProposals"],
      "payload": {
        "proposalType": "audio_narration",
        "expectedAgents": ["claude-1", "gpt-1", "gemini-1"],
        "context": {
          "sourceStage": "agent_asset_design",
          "outputKey": "ownAssetProposal",
          "cameraSourceStage": "agent_camera_design",
          "cameraOutputKey": "ownCameraProposal"
        },
        "promptTemplate": "Scene concept: {{assetProposal.concept}}\nCamera shots: {{cameraProposal.shots}}\n\nDesign the audio experience and write narration that brings this PLACE to life.\n\nIMPORTANT:\n- Narration describes the SETTING and ATMOSPHERE\n- May reference implied inhabitants/history without showing them\n- Focus on what the environment feels like, sounds like, breathes like\n- Leave room for viewer imagination\n\nCREATIVE DIRECTION:\n- Music should enhance mood without overwhelming\n- Ambient sounds create spatial presence\n- Narration is contemplative, not explanatory\n- Think documentary/nature film narration style\n- Evoke emotion and wonder\n\nReturn JSON: { \"music\": { \"style\": \"string\", \"intensity\": number, \"notes\": \"string\" }, \"ambient\": { \"environment\": \"string\", \"effects\": [\"string\"], \"volume\": number }, \"narration\": { \"tone\": \"string\", \"script\": \"string\" } }",
        "responseSchema": {
          "type": "object",
          "properties": {
            "music": {
              "type": "object",
              "properties": {
                "style": { "type": "string" },
                "intensity": { "type": "number", "minimum": 0, "maximum": 1 },
                "notes": { "type": "string" }
              },
              "required": ["style", "intensity", "notes"]
            },
            "ambient": {
              "type": "object",
              "properties": {
                "environment": { "type": "string" },
                "effects": { "type": "array", "items": { "type": "string" } },
                "volume": { "type": "number", "minimum": 0, "maximum": 1 }
              },
              "required": ["environment", "effects", "volume"]
            },
            "narration": {
              "type": "object",
              "properties": {
                "tone": { "type": "string" },
                "script": { "type": "string" }
              },
              "required": ["tone", "script"]
            }
          },
          "required": ["music", "ambient", "narration"]
        }
      }
    },
    {
      "id": "judge_selection",
      "type": "llm",
      "description": "Claude judges 3 complete proposals and selects winner",
      "dependsOn": ["agent_asset_design", "agent_camera_design", "agent_audio_design"],
      "budget": {
        "tokens": 5000,
        "timeMs": 30000
      },
      "outputs": ["judgeDecision"],
      "retry": {
        "attempts": 1,
        "delayMs": 500
      },
      "payload": {
        "provider": "claude",
        "maxTokens": 1500,
        "systemPrompt": "You are a creative director evaluating scene design proposals for live streaming entertainment.",
        "userPrompt": "Review these complete scene design proposals for: {{winningGenre.name}}\n\nEach proposal contains:\n1. Asset Creation (concept + objects)\n2. Camera Shot Planning (cinematography)\n3. Audio & Narration Design (soundscape)\n\n---\n\nPROPOSAL A (Claude):\n{{proposalA}}\n\n---\n\nPROPOSAL B (GPT):\n{{proposalB}}\n\n---\n\nPROPOSAL C (Gemini):\n{{proposalC}}\n\n---\n\nEvaluate each COMPLETE proposal on:\n1. Visual Coherence: How well do assets, camera, and concept work together?\n2. Genre Fit: Does it authentically capture the genre aesthetic?\n3. Audience Appeal: Will this engage and delight live stream viewers?\n4. Ambition & Impact: How bold, creative, and memorable is the vision?\n5. Technical Execution: Quality of asset placement, camera work, and audio design\n\nSelect the winning proposal (A, B, or C) and provide justification.\n\nReturn JSON: { \"winner\": \"A|B|C\", \"justification\": \"string\", \"scores\": { \"A\": { \"coherence\": 1-10, \"genreFit\": 1-10, \"appeal\": 1-10, \"ambition\": 1-10, \"execution\": 1-10 }, \"B\": {...}, \"C\": {...} }, \"strengths\": { \"A\": \"string\", \"B\": \"string\", \"C\": \"string\" } }",
        "responseFormat": {
          "type": "json_schema",
          "name": "JudgeDecision",
          "schema": {
            "type": "object",
            "properties": {
              "winner": { "type": "string", "enum": ["A", "B", "C"] },
              "justification": { "type": "string" },
              "scores": {
                "type": "object",
                "properties": {
                  "A": {
                    "type": "object",
                    "properties": {
                      "coherence": { "type": "number", "minimum": 1, "maximum": 10 },
                      "genreFit": { "type": "number", "minimum": 1, "maximum": 10 },
                      "appeal": { "type": "number", "minimum": 1, "maximum": 10 },
                      "ambition": { "type": "number", "minimum": 1, "maximum": 10 },
                      "execution": { "type": "number", "minimum": 1, "maximum": 10 }
                    },
                    "required": ["coherence", "genreFit", "appeal", "ambition", "execution"]
                  },
                  "B": {
                    "type": "object",
                    "properties": {
                      "coherence": { "type": "number", "minimum": 1, "maximum": 10 },
                      "genreFit": { "type": "number", "minimum": 1, "maximum": 10 },
                      "appeal": { "type": "number", "minimum": 1, "maximum": 10 },
                      "ambition": { "type": "number", "minimum": 1, "maximum": 10 },
                      "execution": { "type": "number", "minimum": 1, "maximum": 10 }
                    },
                    "required": ["coherence", "genreFit", "appeal", "ambition", "execution"]
                  },
                  "C": {
                    "type": "object",
                    "properties": {
                      "coherence": { "type": "number", "minimum": 1, "maximum": 10 },
                      "genreFit": { "type": "number", "minimum": 1, "maximum": 10 },
                      "appeal": { "type": "number", "minimum": 1, "maximum": 10 },
                      "ambition": { "type": "number", "minimum": 1, "maximum": 10 },
                      "execution": { "type": "number", "minimum": 1, "maximum": 10 }
                    },
                    "required": ["coherence", "genreFit", "appeal", "ambition", "execution"]
                  }
                },
                "required": ["A", "B", "C"]
              },
              "strengths": {
                "type": "object",
                "properties": {
                  "A": { "type": "string" },
                  "B": { "type": "string" },
                  "C": { "type": "string" }
                },
                "required": ["A", "B", "C"]
              }
            },
            "required": ["winner", "justification", "scores", "strengths"],
            "additionalProperties": false
          }
        }
      }
    },
    {
      "id": "asset_placement",
      "type": "mcp:worldbuilder",
      "description": "Create winning proposal's assets in Isaac Sim",
      "dependsOn": ["judge_selection"],
      "budget": {
        "timeMs": 15000
      },
      "outputs": ["placementSummary"],
      "retry": {
        "attempts": 2,
        "delayMs": 500
      },
      "payload": {
        "tool": "worldbuilder_create_batch",
        "args": {
          "batch_name": "mvp_scene_{{timestamp}}",
          "parent_path": "/World",
          "elements": "{{winningProposal.assets}}"
        }
      }
    },
    {
      "id": "camera_choreography",
      "type": "system:custom",
      "description": "Execute winning proposal's camera shots (handled by StoryLoopManager)",
      "dependsOn": ["asset_placement"],
      "budget": {
        "timeMs": 60000
      },
      "outputs": ["cameraExecutionStatus"],
      "payload": {
        "note": "Camera shot execution is handled directly by StoryLoopManager._executeScene() which loops through shots and calls the appropriate MCP tools (worldviewer_smooth_move, worldviewer_arc_shot, worldviewer_orbit_shot) with execution_mode: auto for queueing"
      }
    },
    {
      "id": "audio_mix",
      "type": "audio",
      "description": "Trigger narration TTS and audio mixing from winning proposal",
      "dependsOn": ["camera_choreography"],
      "budget": {
        "timeMs": 9000
      },
      "outputs": ["audioStatus"],
      "optional": true,
      "payload": {
        "sync": {
          "id": "mvp_scene_{{timestamp}}",
          "channels": ["narration", "music", "ambient"],
          "metadata": {
            "genre": "{{winningGenre.name}}"
          }
        },
        "requests": [
          {
            "channel": "narration",
            "payload": {
              "text": "{{winningProposal.audioSpec.narration.script}}",
              "voice": "{{mapToneToVoice(winningProposal.audioSpec.narration.tone)}}",
              "volume": 0.7,
              "duck_background": true
            }
          },
          {
            "channel": "music",
            "payload": {
              "style": "{{winningProposal.audioSpec.music.style}}",
              "intensity": "{{winningProposal.audioSpec.music.intensity}}",
              "notes": "{{winningProposal.audioSpec.music.notes}}"
            }
          },
          {
            "channel": "ambient",
            "payload": {
              "environment": "{{winningProposal.audioSpec.ambient.environment}}",
              "special_effects": "{{winningProposal.audioSpec.ambient.effects}}",
              "volume": "{{winningProposal.audioSpec.ambient.volume}}"
            }
          }
        ],
        "allowOffline": true
      }
    }
  ]
}
